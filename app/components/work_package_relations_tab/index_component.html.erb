<%= component_wrapper(tag: "turbo-frame") do %>
  <%=
    if should_render_create_button?
      flex_layout(justify_content: :space_between, align_items: :center, mb: 4) do |action_bar|
        action_bar.with_column(pr: 1) do
          render(Primer::Beta::Text.new(color: :muted)) do
            t("#{I18N_NAMESPACE}.index.action_bar_title")
          end
        end

        # Prevent the menu from overflowing on Safari
        action_bar.with_column(flex_shrink: 0, ml: 2) do
          render(Primer::Alpha::ActionMenu.new(test_selector: NEW_RELATION_ACTION_MENU,
                                               menu_id: NEW_RELATION_ACTION_MENU)) do |menu|
            menu.with_show_button do |button|
              button.with_leading_visual_icon(icon: :"plus")
              button.with_trailing_action_icon(icon: :"triangle-down")
              t(:label_relation)
            end

            render_child_menu_items(menu)

            if should_render_add_relations?
              Relation::TYPES.each do |relation_type, type_configuration_hash|
                label_key = "#{I18N_NAMESPACE}.relations.#{type_configuration_hash[:name]}_singular"
                menu.with_item(
                  label: t(label_key).upcase_first,
                  href: new_relation_path(relation_type:),
                  test_selector: new_button_test_selector(relation_type:),
                  content_arguments: {
                    data: { turbo_stream: true }
                  }
                ) do |item|
                  item.with_description.with_content(t("#{I18N_NAMESPACE}.relations.#{relation_type}_description"))
                end
              end
            end
          end
        end
      end
    end
  %>

  <%=
    flex_layout(mb: 3) do |flex|
      if any_relations?
        key_namespace = "#{I18N_NAMESPACE}.relations"

        # Relations
        directionally_aware_grouped_relations.each do |relation_group|
          base_key = "#{I18N_NAMESPACE}.relations.label_#{relation_group.type}"

          # Combine visible and invisible relations into a single list
          all_relations = relation_group.visible_relations.map { |r| [r, :visible] } +
            relation_group.ghost_relations.map { |r| [r, :ghost] }

          flex.with_row(mb: 4) do
            render_relation_group(
              title: t("#{base_key}_plural").upcase_first,
              relation_type: relation_group.type,
              items: all_relations
            ) do |relation, visibility|
              # Render each relation with its visibility
              render(WorkPackageRelationsTab::RelationComponent.new(
                work_package: work_package,
                relation: relation,
                visibility: visibility
              ))
            end
          end
        end

        # Children
        if any_children?
          base_key = "#{key_namespace}.label_child"

          # Combine visible and invisible children into a single list
          all_children = visible_children.map { |r| [r, :visible] } +
            ghost_children.map { |r| [r, :ghost] }

          flex.with_row do
            render_relation_group(
              title: t("#{base_key}_plural").upcase_first,
              relation_type: :children,
              items: all_children
            ) do |child, visibility|
              render(WorkPackageRelationsTab::RelationComponent.new(work_package:,
                                                                    relation: nil,
                                                                    child:,
                                                                    visibility: visibility))
            end
          end
        end
      else
        flex.with_row do
          render Primer::Beta::Blankslate.new(border: true) do |component|
            component.with_visual_icon(icon: "package-dependents")
            component.with_heading(tag: :h4).with_content(t("#{I18N_NAMESPACE}.index.blankslate_heading"))
            component.with_description { t("#{I18N_NAMESPACE}.index.blankslate_description") }
          end
        end
      end
    end
  %>
<% end %>
