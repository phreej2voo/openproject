<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>

<%=
  component_wrapper do
    primer_form_with(
      class: "op-new-project-storage-form",
      model: @project_storage,
      url:,
      data: { turbo: true },
      method:
    ) do |form|
      concat(render(Primer::Alpha::Dialog::Body.new(
        id: dialog_body_id,
        test_selector: dialog_body_id,
        aria: { label: aria_label }
      )) do
        flex_layout do |flex|
          flex.with_row do
            angular_component_tag 'opce-custom-modal-overlay'
          end

          if new_record?
            flex.with_row(mb: 3) do
              render(Storages::Admin::Storages::AddProjectsAutocompleterForm.new(form, project_storage:))
            end

            flex.with_row(mb: 3) do
              render(Primer::Alpha::ActionList::Divider.new(scheme: :subtle))
            end

            flex.with_row(mb: 2) do
              render(Primer::Beta::Heading.new(tag: :h4)) { t(:"storages.label_project_folder") }
            end
          end

          flex.with_row(mb: 3) do
            render(Primer::Beta::Text.new) { help_text }
          end

          flex.with_row(
            data: {
              "application-target": "dynamic",
              controller: "storages--project-folder-mode-form",
              'storages--project-folder-mode-form-folder-mode-value': @project_storage.project_folder_mode,
              'storages--project-folder-mode-form-placeholder-folder-name-value': t(:"storages.label_no_selected_folder"),
              'storages--project-folder-mode-form-not-logged-in-validation-value': t(:"storages.instructions.not_logged_into_storage"),
              'storages--project-folder-mode-form-last-project-folders-value': @last_project_folders
            }
          ) do
            render(Storages::Admin::ProjectStorages::ProjectFolderModeForm.new(form, project_storage:))
          end
        end
      end)

      concat(render(Primer::Alpha::Dialog::Footer.new(show_divider: false)) do
        concat(render(Primer::ButtonComponent.new(data: { 'close-dialog-id': dialog_id })) { cancel_button_text })
        concat(render(Primer::ButtonComponent.new(scheme: :primary, type: :submit)) { submit_button_text })
      end)
    end
  end
%>
