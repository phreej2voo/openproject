<%= component_wrapper do %>
  <% if provider.seeded_from_env? %>
    <%=
      render(Primer::Alpha::Banner.new(mb: 2, scheme: :default, icon: :bell, spacious: true)) do
        I18n.t("openid_connect.providers.seeded_from_env")
      end
    %>
  <% end %>

  <%= render(border_box_container) do |component|
    component.with_header(color: :muted) do
      render(Primer::Beta::Text.new(font_weight: :bold)) { I18n.t(:label_basic_details) }
    end

    case provider.oidc_provider
    when 'google'
      component.with_row(scheme: :default) do
        basic_details_component = if edit_state == :name
                                     OpenIDConnect::Providers::Sections::FormComponent.new(
                                       provider,
                                       form_class: OpenIDConnect::Providers::NameInputForm,
                                       edit_state:,
                                       next_edit_state: :client_details,
                                       edit_mode:,
                                       heading: nil,
                                       fetch_metadata: true
                                     )
                                  else
                                    OpenIDConnect::Providers::Sections::ShowComponent.new(
                                      provider,
                                      view_mode:,
                                      target_state: :name,
                                      heading: t("activemodel.attributes.openid_connect/provider.display_name"),
                                      description: t("openid_connect.providers.section_texts.display_name")
                                    )
                                  end
        render(basic_details_component)
      end

      component.with_row(scheme: :default) do
        if edit_state == :client_details
          render(OpenIDConnect::Providers::Sections::FormComponent.new(
            provider,
            form_class: OpenIDConnect::Providers::ClientDetailsForm,
            edit_state:,
            edit_mode:,
            heading: nil,
            fetch_metadata: true
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :client_details,
            view_mode:,
            heading: t("openid_connect.providers.label_client_details"),
            label: provider.advanced_details_configured? ? t(:label_completed) : t(:label_not_configured),
            label_scheme: provider.advanced_details_configured? ? :success : :secondary,
            description: t("openid_connect.providers.client_details_description")
          ))
        end
      end
    when 'microsoft_entra'
      component.with_row(scheme: :default) do
        basic_details_component = if edit_state == :name
                                     OpenIDConnect::Providers::Sections::FormComponent.new(
                                       provider,
                                       form_class: OpenIDConnect::Providers::NameInputAndTenantForm,
                                       edit_state:,
                                       next_edit_state: :client_details,
                                       edit_mode:,
                                       heading: nil,
                                       fetch_metadata: true
                                     )
                                  else
                                    OpenIDConnect::Providers::Sections::ShowComponent.new(
                                      provider,
                                      view_mode:,
                                      target_state: :name,
                                      heading: t("activemodel.attributes.openid_connect/provider.display_name"),
                                      description: t("openid_connect.providers.section_texts.display_name")
                                    )
                                  end
        render(basic_details_component)
      end

      component.with_row(scheme: :default) do
        if edit_state == :client_details
          render(OpenIDConnect::Providers::Sections::FormComponent.new(
            provider,
            form_class: OpenIDConnect::Providers::ClientDetailsForm,
            edit_state:,
            edit_mode:,
            heading: nil,
            fetch_metadata: true
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :client_details,
            view_mode:,
            heading: t("openid_connect.providers.label_client_details"),
            label: provider.advanced_details_configured? ? t(:label_completed) : t(:label_not_configured),
            label_scheme: provider.advanced_details_configured? ? :success : :secondary,
            description: t("openid_connect.providers.client_details_description")
          ))
        end
      end
    else # custom
      component.with_row(scheme: :default) do
        basic_details_component =
          if edit_state == :name
            OpenIDConnect::Providers::Sections::FormComponent.new(
              provider,
              form_class: OpenIDConnect::Providers::NameInputForm,
              edit_state:,
              next_edit_state: :metadata,
              edit_mode:,
              heading: nil
            )
          else
            OpenIDConnect::Providers::Sections::ShowComponent.new(
              provider,
              view_mode:,
              target_state: :name,
              heading: t("activemodel.attributes.openid_connect/provider.display_name"),
              description: t("openid_connect.providers.section_texts.display_name")
            )
          end
        render(basic_details_component)
      end

      component.with_row(scheme: :neutral, color: :muted) do
        render(Primer::Beta::Text.new(font_weight: :bold)) { I18n.t('openid_connect.providers.label_automatic_configuration') }
      end

      component.with_row(scheme: :default) do
        if edit_state == :metadata
          render(OpenIDConnect::Providers::Sections::MetadataFormComponent.new(
            provider,
            form_class: nil,
            heading: nil,
            edit_state:,
            edit_mode:,
            next_edit_state: :metadata_details,
            fetch_metadata: true
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :metadata,
            view_mode:,
            heading: t("openid_connect.providers.label_metadata"),
            description: t("openid_connect.providers.section_texts.metadata"),
            label: provider.metadata_url.present? ? t(:label_completed) : t(:label_not_configured),
            label_scheme: provider.metadata_url.present? ? :success : :secondary
          ))
        end
      end

      component.with_row(scheme: :neutral, color: :muted) do
        render(Primer::Beta::Text.new(font_weight: :bold)) { I18n.t('openid_connect.providers.label_advanced_configuration') }
      end

      component.with_row(scheme: :default) do
        if edit_state == :metadata_details
          render(OpenIDConnect::Providers::Sections::FormComponent.new(
            provider,
            form_class: OpenIDConnect::Providers::MetadataDetailsForm,
            edit_state:,
            next_edit_state: :client_details,
            edit_mode:,
            banner: provider.metadata_url.present? ? t("openid_connect.providers.section_texts.configuration_metadata") : nil,
            banner_scheme: :default,
            heading: nil
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :metadata_details,
            view_mode:,
            heading: t("openid_connect.providers.label_configuration_details"),
            description: t("openid_connect.providers.section_texts.configuration"),
            label: provider.metadata_configured? ? t(:label_completed) : t(:label_not_configured),
            label_scheme: provider.metadata_configured? ? :success : :secondary
          ))
        end
      end

      component.with_row(scheme: :default) do
        if edit_state == :client_details
          render(OpenIDConnect::Providers::Sections::FormComponent.new(
            provider,
            form_class: OpenIDConnect::Providers::ClientDetailsForm,
            edit_state:,
            next_edit_state: :attribute_mapping,
            edit_mode:,
            heading: nil
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :client_details,
            view_mode:,
            heading: t("openid_connect.providers.label_client_details"),
            description: t("openid_connect.providers.client_details_description"),
            label: provider.advanced_details_configured? ? t(:label_completed) : t(:label_not_configured),
            label_scheme: provider.advanced_details_configured? ? :success : :secondary
          ))
        end
      end

      component.with_row(scheme: :neutral, color: :muted) do
        render(Primer::Beta::Text.new(font_weight: :bold)) { I18n.t('openid_connect.providers.label_optional_configuration') }
      end

      component.with_row(scheme: :default) do
        if edit_state == :attribute_mapping
          render(OpenIDConnect::Providers::Sections::FormComponent.new(
            provider,
            form_class: OpenIDConnect::Providers::AttributeMappingForm,
            edit_state:,
            next_edit_state: :claims,
            edit_mode:,
            heading: nil
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :attribute_mapping,
            view_mode:,
            heading: t("openid_connect.providers.label_attribute_mapping"),
            description: t("openid_connect.providers.section_texts.attribute_mapping"),
            label: provider.mapping_configured? ? t(:label_completed) : nil,
            label_scheme: provider.mapping_configured? ? :success : :secondary
          ))
        end
      end

      component.with_row(scheme: :default) do
        if edit_state == :claims
          render(OpenIDConnect::Providers::Sections::FormComponent.new(
            provider,
            form_class: OpenIDConnect::Providers::ClaimsForm,
            edit_state:,
            edit_mode:,
            heading: nil
          ))
        else
          render(OpenIDConnect::Providers::Sections::ShowComponent.new(
            provider,
            target_state: :claims,
            view_mode:,
            heading: t("activemodel.attributes.openid_connect/provider.claims"),
            description: t("openid_connect.providers.section_texts.claims")
          ))
        end
      end
    end
    end %>
<% end %>
